# Main program name
PROG = server

# Report name
REPORT = report.pdf

# Compiler
CC = gcc
STD = -std=gnu99

# Directories
INCLUDEDIR = ./../common/include
SOURCEDIR = ./../common/source
BUILDDIR = build

# Compilation Flags
RFLAGS = -Wall -Werror -I$(INCLUDEDIR) -O
DFLAGS = -Wall -I$(INCLUDEDIR) -g

# Linking and Builing Flags
LDFLAGS += $(shell autoopts-config ldflags)

# Include files (Server headers plus generated by autogen headers files)
INCLUDES = $(wildcard ./*.h) checkoptn.h server-fsm.h
SOURCES = $(addprefix ./, checkoptn.c server-fsm.c server.c my_socket.c main.c)

# Объектные файлы
OBJS = $(patsubst ./%, build/%, $(patsubst %.c,%.o,$(CSRC)))

# Generate check options files with autogen
./checkoptn.c: ./checkoptn.def
	SHELL=/bin/sh autogen checkoptn.def
./checkoptn.h:  ./checkoptn.def
	SHELL=/bin/sh autogen checkoptn.def

# Generate Finite State Machine files with autogen
./server-fsm.c: server.def
	autogen server.def
./server-fsm.h: server.def
	autogen server.def

# Сгенерённый код компилируется особым образом
# (как того требует инструкция).
build/checkoptn.o: checkoptn.c
	$(CC) -c -DTEST_CHECK_OPTS `autoopts-config cflags` -o $@  $<

# Сгенерённый код компилируется особым образом (костыли).
build/server-fsm.o: ./server-fsm.c
	$(CC) -I$(IDIR) -Wall -o $@ -c $<

build/%.o: ./%.c $(INCLUDES)
	$(CC) -c $(CFLAGS) -o $@ $<

server: $(OBJS)
	$(CC) -o $@ $(LDFLAGS) $^

# Targets
all: clean build_dir server
#all: clean build_dir server test_client

all-debug: clean build_dir server-debug test_client-debug

server-old:
	$(CC) $(STD) $(RFLAGS) -o ./$(BUILDDIR)/server \
    server.c my_socket.c main.c $(SOURCEDIR)/*.c \


test_client:
	$(CC) $(STD) $(RFLAGS) -o ./$(BUILDDIR)/test_client \
	test_client.c $(SOURCEDIR)/*.c

server-debug:
	$(CC) $(STD) $(DFLAGS) -o ./$(BUILDDIR)/server \
    server.c my_socket.c main.c $(SOURCEDIR)/*.c

test_client-debug:
	$(CC) $(STD) $(DFLAGS) -o ./$(BUILDDIR)/test_client \
	test_client.c $(SOURCEDIR)/*.c

clean: 
	rm -rf *.o ./build

build_dir:
	mkdir -p $(BUILDDIR)

